
BMS_v0.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00803f00  000001cc  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00803f06  00803f06  00000286  2**0
                  ALLOC
  3 .fuse         00000009  00820000  00820000  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000028f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000209c  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001704  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000515  00000000  00000000  00003af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000a8  00000000  00000000  0000400c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000126a  00000000  00000000  000040b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000c7  00000000  00000000  0000531e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  000053e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	ec ec       	ldi	r30, 0xCC	; 204
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 30       	cpi	r26, 0x06	; 6
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a6 e0       	ldi	r26, 0x06	; 6
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ac 31       	cpi	r26, 0x1C	; 28
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	92 d0       	rcall	.+292    	; 0x18c <main>
  68:	af c0       	rjmp	.+350    	; 0x1c8 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <ADC0_read_sample>:

#define v_measure_pin (2)

uint16_t ADC0_read_sample(void)
{
	PORTA_OUT |= (1<<v_measure_pin);
  6c:	e4 e0       	ldi	r30, 0x04	; 4
  6e:	f4 e0       	ldi	r31, 0x04	; 4
  70:	80 81       	ld	r24, Z
  72:	84 60       	ori	r24, 0x04	; 4
  74:	80 83       	st	Z, r24
	
	ADC0.COMMAND = ADC_STCONV_bm;
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__RODATA_PM_OFFSET__+0x7f8608>
	
	while(!(ADC0.INTFLAGS & ADC_RESRDY_bm))
  7c:	80 91 0b 06 	lds	r24, 0x060B	; 0x80060b <__RODATA_PM_OFFSET__+0x7f860b>
  80:	80 ff       	sbrs	r24, 0
  82:	fc cf       	rjmp	.-8      	; 0x7c <ADC0_read_sample+0x10>
	{
		;
	}
	
	ADC0.INTFLAGS = ADC_RESRDY_bm;
  84:	e0 e0       	ldi	r30, 0x00	; 0
  86:	f6 e0       	ldi	r31, 0x06	; 6
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	83 87       	std	Z+11, r24	; 0x0b
	
	PORTA_OUT &= ~(1<<v_measure_pin);
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b4 e0       	ldi	r27, 0x04	; 4
  90:	8c 91       	ld	r24, X
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8c 93       	st	X, r24
	
	return ADC0.RES;
  96:	80 89       	ldd	r24, Z+16	; 0x10
  98:	91 89       	ldd	r25, Z+17	; 0x11
	
}
  9a:	08 95       	ret

0000009c <ADC0_init_sample>:

void ADC0_init_sample(void)
{
	PORTA_DIR = (1<<v_measure_pin);	
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	f4 e0       	ldi	r31, 0x04	; 4
  a0:	84 e0       	ldi	r24, 0x04	; 4
  a2:	80 83       	st	Z, r24
	
	PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;  //disable input buffer
  a4:	81 8b       	std	Z+17, r24	; 0x11
	PORTA.PIN1CTRL &= ~PORT_PULLUPEN_bm;   // re-disable pull up
  a6:	91 89       	ldd	r25, Z+17	; 0x11
  a8:	97 7f       	andi	r25, 0xF7	; 247
  aa:	91 8b       	std	Z+17, r25	; 0x11
	
	VREF.CTRLA = VREF_ADC0REFSEL_2V5_gc;   // internal reference to 2.50v
  ac:	90 e2       	ldi	r25, 0x20	; 32
  ae:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__RODATA_PM_OFFSET__+0x7f80a0>
	
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc; /* ADC Enable: enabled */
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f6 e0       	ldi	r31, 0x06	; 6
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	90 83       	st	Z, r25
	
	ADC0.CTRLC = ADC_REFSEL_INTREF_gc | ADC_PRESC_DIV4_gc ;    // internal reference and clock divided by 5
  ba:	92 83       	std	Z+2, r25	; 0x02
	
	ADC0.MUXPOS = ADC_MUXPOS_AIN1_gc; // on pin pa1
  bc:	96 83       	std	Z+6, r25	; 0x06
	
	ADC0.CTRLB = ADC_SAMPNUM_ACC16_gc; // 16 samples
  be:	81 83       	std	Z+1, r24	; 0x01
  c0:	08 95       	ret

000000c2 <USART0_init>:



void USART0_init(void)
{
	PORTB_DIR |= PIN2_bm;       // Tx - Output(1)
  c2:	e0 e2       	ldi	r30, 0x20	; 32
  c4:	f4 e0       	ldi	r31, 0x04	; 4
  c6:	80 81       	ld	r24, Z
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	80 83       	st	Z, r24
	//PORTB_DIR &= ~PIN3_bm;	// Rx - Input(0)
	
	USART0.BAUD =(uint16_t)USART0_BAUD_RATE(9600);
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	f8 e0       	ldi	r31, 0x08	; 8
  d0:	87 e5       	ldi	r24, 0x57	; 87
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	80 87       	std	Z+8, r24	; 0x08
  d6:	91 87       	std	Z+9, r25	; 0x09
	
	USART0.CTRLB |= USART_TXEN_bm; //enabling the transmit line
  d8:	86 81       	ldd	r24, Z+6	; 0x06
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	86 83       	std	Z+6, r24	; 0x06
  de:	08 95       	ret

000000e0 <USART0_sendChar>:
	
}

void USART0_sendChar(uint16_t c)
{
	while(!(USART0.STATUS & USART_DREIE_bm))
  e0:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  e4:	95 ff       	sbrs	r25, 5
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <USART0_sendChar>
	{
		;
	}
	USART0.TXDATAL = c;
  e8:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  ec:	08 95       	ret

000000ee <USART0_sendString>:
}

void USART0_sendString(uint8_t *str)
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	8c 01       	movw	r16, r24
	/*for(size_t i = 0;i <strlen(str); i++)
	{
		USART0_sendChar(str[i]);
	}
	*/
	USART0_sendChar(frameStart);
  f8:	80 91 05 3f 	lds	r24, 0x3F05	; 0x803f05 <frameStart>
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	f0 df       	rcall	.-32     	; 0xe0 <USART0_sendChar>
	
	for(size_t i = 0;i < 6; i++)
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	07 c0       	rjmp	.+14     	; 0x114 <__DATA_REGION_LENGTH__+0x14>
	{
		USART0_sendChar(str[i]);
 106:	f8 01       	movw	r30, r16
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	80 81       	ld	r24, Z
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	e7 df       	rcall	.-50     	; 0xe0 <USART0_sendChar>
		USART0_sendChar(str[i]);
	}
	*/
	USART0_sendChar(frameStart);
	
	for(size_t i = 0;i < 6; i++)
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	c6 30       	cpi	r28, 0x06	; 6
 116:	d1 05       	cpc	r29, r1
 118:	b0 f3       	brcs	.-20     	; 0x106 <__DATA_REGION_LENGTH__+0x6>
	{
		USART0_sendChar(str[i]);
	}
	
	USART0_sendChar(frameStop);
 11a:	80 91 04 3f 	lds	r24, 0x3F04	; 0x803f04 <frameStop>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	df df       	rcall	.-66     	; 0xe0 <USART0_sendChar>
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <low_power_init>:
{
	//PORTA_DIR = 0xff; // all pins as output to save power
	
	//PORTA.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc; //UPDI
	//PORTA.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc; //Analog in
	PORTA.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;   // digital out to adc
 12c:	e0 e0       	ldi	r30, 0x00	; 0
 12e:	f4 e0       	ldi	r31, 0x04	; 4
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	82 8b       	std	Z+18, r24	; 0x12
	PORTA.PIN3CTRL = PORT_ISC_INPUT_DISABLE_gc;
 134:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL = PORT_ISC_INPUT_DISABLE_gc;	
 136:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_ISC_INPUT_DISABLE_gc;
 138:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN6CTRL = PORT_ISC_INPUT_DISABLE_gc;	
 13a:	86 8b       	std	Z+22, r24	; 0x16
	PORTA.PIN7CTRL = PORT_ISC_INPUT_DISABLE_gc;	
 13c:	87 8b       	std	Z+23, r24	; 0x17
	
	PORTB.PIN0CTRL = PORT_ISC_INPUT_DISABLE_gc;
 13e:	e0 e2       	ldi	r30, 0x20	; 32
 140:	f4 e0       	ldi	r31, 0x04	; 4
 142:	80 8b       	std	Z+16, r24	; 0x10
	PORTB.PIN1CTRL = PORT_ISC_INPUT_DISABLE_gc;
 144:	81 8b       	std	Z+17, r24	; 0x11
 146:	08 95       	ret

00000148 <makeStruct>:

uint8_t SerialBuffer[8+ sizeof(dataBuffer)];

void makeStruct(dataBuffer *receivebuffer)
{
	receivebuffer->address =moduleNum;
 148:	20 91 00 3f 	lds	r18, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	receivebuffer->operation =0;
 150:	11 82       	std	Z+1, r1	; 0x01
	
	for (int i = 1; i<=maxModules ; i++)
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	12 c0       	rjmp	.+36     	; 0x17c <makeStruct+0x34>
	{
		if(i==moduleNum)
 158:	40 91 00 3f 	lds	r20, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 15c:	50 91 01 3f 	lds	r21, 0x3F01	; 0x803f01 <__DATA_REGION_ORIGIN__+0x1>
 160:	24 17       	cp	r18, r20
 162:	35 07       	cpc	r19, r21
 164:	49 f4       	brne	.+18     	; 0x178 <makeStruct+0x30>
			receivebuffer->value[i-1] = 696;
 166:	f9 01       	movw	r30, r18
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e8 0f       	add	r30, r24
 16e:	f9 1f       	adc	r31, r25
 170:	48 eb       	ldi	r20, 0xB8	; 184
 172:	52 e0       	ldi	r21, 0x02	; 2
 174:	40 83       	st	Z, r20
 176:	51 83       	std	Z+1, r21	; 0x01
void makeStruct(dataBuffer *receivebuffer)
{
	receivebuffer->address =moduleNum;
	receivebuffer->operation =0;
	
	for (int i = 1; i<=maxModules ; i++)
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	40 91 02 3f 	lds	r20, 0x3F02	; 0x803f02 <maxModules>
 180:	50 91 03 3f 	lds	r21, 0x3F03	; 0x803f03 <maxModules+0x1>
 184:	42 17       	cp	r20, r18
 186:	53 07       	cpc	r21, r19
 188:	3c f7       	brge	.-50     	; 0x158 <makeStruct+0x10>
	{
		if(i==moduleNum)
			receivebuffer->value[i-1] = 696;
	}
	
}
 18a:	08 95       	ret

0000018c <main>:


int main(void)
{
	
	low_power_init();
 18c:	cf df       	rcall	.-98     	; 0x12c <low_power_init>
  	USART0_init();
 18e:	99 df       	rcall	.-206    	; 0xc2 <USART0_init>
  	ADC0_init_sample();
 190:	85 df       	rcall	.-246    	; 0x9c <ADC0_init_sample>
	
	while (1)
  	{
		
	  	adcVal = ADC0_read_sample();
 192:	6c df       	rcall	.-296    	; 0x6c <ADC0_read_sample>
	  	
	  	adcVal = adcVal >> 4;
 194:	92 95       	swap	r25
 196:	82 95       	swap	r24
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	89 27       	eor	r24, r25
 19c:	9f 70       	andi	r25, 0x0F	; 15
 19e:	89 27       	eor	r24, r25
 1a0:	80 93 0c 3f 	sts	0x3F0C, r24	; 0x803f0c <adcVal>
 1a4:	90 93 0d 3f 	sts	0x3F0D, r25	; 0x803f0d <adcVal+0x1>
		  

		//sprintf("%i\r\n" , adcVal);  //takes up huge chunk of code space.
		makeStruct((dataBuffer*)SerialBuffer);
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	9f e3       	ldi	r25, 0x3F	; 63
 1ac:	cd df       	rcall	.-102    	; 0x148 <makeStruct>
		
	  	USART0_sendString(SerialBuffer);
 1ae:	8e e0       	ldi	r24, 0x0E	; 14
 1b0:	9f e3       	ldi	r25, 0x3F	; 63
 1b2:	9d df       	rcall	.-198    	; 0xee <USART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	24 e5       	ldi	r18, 0x54	; 84
 1b6:	83 e2       	ldi	r24, 0x23	; 35
 1b8:	98 e0       	ldi	r25, 0x08	; 8
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x2e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x38>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x3a>
 1c6:	e5 cf       	rjmp	.-54     	; 0x192 <main+0x6>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
